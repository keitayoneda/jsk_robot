<launch>
    <arg name="rosbag" doc="rosbag file path" />
    <arg name="use_decompress" default="true" />
    <arg name="loop" default="true" />
    <arg name="gui" default="true" />
    <arg name="loop_flag" value="--loop" if="$(arg loop)" />
    <arg name="loop_flag" value="" unless="$(arg loop)" />
    <arg name="start_time" default="0" />
    <arg name="duration_time" default="0" />
    <arg name="duration" default="--duration $(arg duration_time)" if="$(eval duration_time != 0)" />
    <arg name="duration" default="" if="$(eval duration_time == 0)" />
<arg name="manager" default="rosbag_play_nodelet_manager" />
<node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="screen" />

    <include
        file="$(find jsk_spot_startup)/launch/rviz.launch"
        if="$(arg gui)"
        />

    <param name="/use_sim_time" value="true" />

    <param
        name="robot_description"
        command="$(find xacro)/xacro $(find spot_description)/urdf/spot.urdf.xacro --inorder"
        />
    <node
        name="robot_state_publisher"
        pkg="robot_state_publisher"
        type="robot_state_publisher"
        />

    <node
        pkg="rosbag"
        type="play"
        name="$(anon rosbag)"
        args="$(arg rosbag) $(arg loop_flag) --clock --start $(arg start_time) $(arg duration)"
        launch-prefix="xterm -e"
        />
    <node
        pkg="jsk_spot_startup"
        type="static_tf_republisher.py"
        name="static_tf_republisher"
        args="$(arg rosbag)"
        />

    <!-- image decompression -->
    <node
        pkg="image_transport"
        type="republish"
        name="panorama_decompress"
        args="compressed in:=/dual_fisheye_to_panorama/output raw out:=/dual_fisheye_to_panorama/output"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="back_camera_decompress"
        args="compressed in:=/spot/camera/back/image raw out:=/spot/camera/back/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="frontleft_camera_decompress"
        args="compressed in:=/spot/camera/frontleft/image raw out:=/spot/camera/frontleft/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="frontright_camera_decompress"
        args="compressed in:=/spot/camera/frontright/image raw out:=/spot/camera/frontright/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="left_camera_decompress"
        args="compressed in:=/spot/camera/left/image raw out:=/spot/camera/left/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="right_camera_decompress"
        args="compressed in:=/spot/camera/right/image raw out:=/spot/camera/right/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="back_depth_decompress"
        args="compressedDepth in:=/spot/depth/back/image raw out:=/spot/depth/back/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="frontleft_depth_decompress"
        args="compressedDepth in:=/spot/depth/frontleft/image raw out:=/spot/depth/frontleft/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="frontright_depth_decompress"
        args="compressedDepth in:=/spot/depth/frontright/image raw out:=/spot/depth/frontright/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="left_depth_decompress"
        args="compressedDepth in:=/spot/depth/left/image raw out:=/spot/depth/left/image"
        if="$(arg use_decompress)"
        />
    <node
        pkg="image_transport"
        type="republish"
        name="right_depth_decompress"
        args="compressedDepth in:=/spot/depth/right/image raw out:=/spot/depth/right/image"
        if="$(arg use_decompress)"
        />

<node pkg="nodelet" type="nodelet" name="point_cloud_right"
        args="load depth_image_proc/point_cloud_xyz $(arg manager)" output="screen" >
    <remap from="camera_info" to="/spot/depth/right/camera_info" />
    <remap from="image_rect" to="/spot/depth/right/image" />
    <remap from="points" to="/spot/right/points" />
    <rosparam>
      queue_size: 100
    </rosparam>
</node>

<node pkg="nodelet" type="nodelet" name="point_cloud_left"
        args="load depth_image_proc/point_cloud_xyz $(arg manager)" output="screen" >
    <remap from="camera_info" to="/spot/depth/left/camera_info" />
    <remap from="image_rect" to="/spot/depth/left/image" />
    <remap from="points" to="/spot/left/points" />
    <rosparam>
      queue_size: 100
    </rosparam>
</node>
<node pkg="nodelet" type="nodelet" name="point_cloud_back"
        args="load depth_image_proc/point_cloud_xyz $(arg manager)" output="screen" >
    <remap from="camera_info" to="/spot/depth/back/camera_info" />
    <remap from="image_rect" to="/spot/depth/back/image" />
    <remap from="points" to="/spot/back/points" />
    <rosparam>
      queue_size: 100
    </rosparam>
</node>
<node pkg="nodelet" type="nodelet" name="point_cloud_frontleft"
        args="load depth_image_proc/point_cloud_xyz $(arg manager)" output="screen" >
    <remap from="camera_info" to="/spot/depth/frontleft/camera_info" />
    <remap from="image_rect" to="/spot/depth/frontleft/image" />
    <remap from="points" to="/spot/frontleft/points" />
    <rosparam>
      queue_size: 100
    </rosparam>
</node>
<node pkg="nodelet" type="nodelet" name="point_cloud_frontright"
        args="load depth_image_proc/point_cloud_xyz $(arg manager)" output="screen" >
    <remap from="camera_info" to="/spot/depth/frontright/camera_info" />
    <remap from="image_rect" to="/spot/depth/frontright/image" />
    <remap from="points" to="/spot/frontright/points" />
    <rosparam>
      queue_size: 100
    </rosparam>
</node>

    <!-- Create object detection visuzaliation image and comress it -->
    <node
        pkg="jsk_perception"
        type="draw_rects"
        name="object_detection_visualizer"
        >
        <remap from="~input" to="/dual_fisheye_to_panorama/output" />
        <remap from="~input/rects" to="/spot_recognition/rects" />
        <remap from="~input/class" to="/spot_recognition/class" />
        <remap from="~output" to="/spot_recognition/object_detection_image" />
    </node>
    <node
        pkg="image_transport"
        type="republish"
        name="detection_visualization_compress"
        args="raw in:=/spot_recognition/object_detection_image compressed out:=/spot_recognition/object_detection_image"
        />
</launch>
